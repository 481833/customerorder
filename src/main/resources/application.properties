server.port=8089
## default connection pool
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5

## PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/customerdb
#spring.datasource.name=customerdb
spring.datasource.username=postgres
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.show-sql=true


# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Disable feature detection by this undocumented parameter. Check the org.hibernate.engine.jdbc.internal.JdbcServiceImpl.configure method for more details.
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false


#drop n create table again, good for testing, comment this in production.
#Values create/create-drop/validate/update
#create – Hibernate first drops existing tables, then creates new tables
#update – the object model created based on the mappings (annotations or XML) is compared with the existing schema, and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even if they are no more required by the application
#create-drop – similar to create, with the addition that Hibernate will drop the database after all operations are completed. Typically used for unit testing
#validate – Hibernate only validates whether the tables and columns exist, otherwise it throws an exception
#none – this value effectively turns off the DDL generation
#Make sure to disable spring.jpa.hibernate.ddl-auto if you use schema.sql.
#spring.jpa.hibernate.ddl-auto=none
spring.datasource.initialization-mode=always

#spring.main.web-application-type=none